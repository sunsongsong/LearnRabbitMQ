先看文章：
https://my.oschina.net/u/2948566/blog/1624963

rabbit学习：
三个概念：发消息者、队列、接收消息者
rabbit在这之上增加了交换器（Exchange）
这样发消息者就和队列没有联系了，转而变成发消息者把消息交给交换器，交换器再根据策略给队列

入门案例：
一对一的使用
可以先理解为：消息发送者发送消息到队列，消息接收者监听队列，有新消息就消费
代码：
git代码：

一对多的使用
被消费者均匀消费（如果需要每一个消费者都消费到，则需要采用广播模式）

多对多的使用
多个消息发送者往同一队列发消息，消息接受者消费同一队列消息

发送实体对象

路由器类型
fanout（广播或订阅模式）：会忽视绑定键，每个消费者都可以接受到所有的消息（前提是每个消费者都要有各自单独的队列，而不是共有同一队列）。跟路由键完全没有关系。
direct：只有绑定键和路由键完全匹配时，才可以接受到消息。（可以理解为点对点）
topic：可以设置多个关键词作为路由键，在绑定键中可以使用*和#来匹配
headers：（可以忽视它的存在）


以下都涉及到绑定：
https://www.cnblogs.com/luxiaoxun/p/3918054.html
Exchange:接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。
ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。

Exchange的作用：接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。


有广播和主题两种方式来实现发布和订阅

难点1：direct exchange 点对点


难点2： fanout exchange  广播
使用场景：发布、订阅模式，发送端发送广播消息，多个接收端接收。

现有fanout.A fanout.B fanout.C 三个队列
需要只要发送一个消息，以上三个队列都能够接收到
那么我们可以通过 fanout exchange交换器来实现
做法：将三个队列绑定到同一fanout exchange,发送消息只需发送到 该fanout exchange交换器即可。
案例代码...


难点3： topic exchange 模糊匹配
使用场景：发送端不只按固定的routing key发送消息，而是按字符串“匹配”发送，接收端同样如此。

现在有队列1(topic:one)和队列2(topic:two)  分别对应了这两个队列的监听者TopicOneReceiver TopicTwoReceiver
现需要：队列2都能接收到所有以topic开头的消息

按之前做的，消息发送者可以每次发送完对应的队列后，再向队列2发送即可。但是很费劲。
那么此时我们可以通过Exchange转发器即可实现,转发器可以根据你所Binding的规则，进行转发给相应的队列
案例代码...
核心代码：BindingBuilder.bind(queueTwo).to(exchange).with("topic.#");
解释：给队列2绑定规则"topic.#"交给转发器进行转发。 该规则只要是topic.开头的队列消息都被转发进queueTwo
或者理解为：该路由键接收了所有topic开头的信息，交给转发器，转发到了队列2中







对比：topic、fanout、direct三种
fanout：只要绑定到一个fanout exchange交换器的队列，都会接收到发送到该exchange的消息
direct: 具体到某一个key的监听
Topic ：根据路由键* # 进行匹配转发（功能最为强大）


难点4：带回调的消息发送
消息发送到队列被消费者是否消费，此时可以通过回调函数来验证


进阶学习
https://www.cnblogs.com/xishuai/p/rabbitmq-cli-rabbitmqadmin.html

测试：问题 消费方如果出现异常，消息会不断重发，
处理方式：
设置最大消费次数，每次间隔时间，和死信队列





目标：
生产环境模拟：
多个消息发送者随机发送，接受者需要一直监听队列，有新消息就处理，如果有堆积怎么处理，重启呢？
生产环境common包 定义消息队列的名称，避免冲突，模拟实现


问题思考？
1.如何避免重复消费 redis记录key 进行校验
2.如果报错 咋弄？ 重试机制 和死信队列
3.如何设置不均分的发配，设置为消费完了再发配
4.临时队列的使用，消费者开启时，就通过临时队列接收，关闭时临时队列就删除，适用于广播形式，临时队列与exchange绑定。（该临时队列对这个路由器中的消息感兴趣。）
5.队列消息的持久化（queue的持久化是通过durable=true来实现的）
6.acknowledge-mode=manual, default-requeue-rejected=false  需要手动确认 异常的会被重新放入队列


rabbitMq的队列，一旦申明就不可以修改，否则会报错。
比如开始申明了一个队列不是持久化的，后来改为了持久化，则会报错。







