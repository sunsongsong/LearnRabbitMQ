待参考文章和示例：
https://github.com/hryou0922/spring_boot
https://blog.csdn.net/u013851082/article/details/69223393
https://github.com/mylxsw/rabbitmq-pubsub-java

重点：
    1.四种交换器(查看rabbitmq2的TestController)
    Direct：点对点 完全匹配
    Fanout：广播 绑定同一交换器的都会被收到
    Topic： 通过路由键进行模糊匹配 
    Headers： 根据发送的消息内容中的headers属性进行匹配 
    
    2.消息的推拉
    推：太多会造成消费者消费不了，缓冲区溢出，可以设置最大推送个数，如果消费者没有返回ack则不会再推送
    拉：会不停建立连接，消耗性能。

    3.ack确认机制
    如果使用默认的自动确认机制，则无法知道消息是否被成功消费
    一般采用消费端，手动确认成功消费后，队列才会移除改消息
    手动确认：消费者拿到消息后，设置手动确认ack，在消息成功被消费后，再发送给队列确认被成功消费

    4.死信队列


####rabbitmq
主要演示了rabbitmq一对一的简单使用

####rabbitmq2
主要演示了rabbitmq的fanout、topic等的使用

####rabbitmq3
主要演示了rabbitmq的实体对象传输的使用

####rabbitmq4
主要演示了常识用springboot的amqp包进行测试，但是失败

####rabbitmq5
chapter1:简单案例
chapter2:采用手动ack确认机制





（从这以下是对 《RabbitMQ实战指南》的案例实践）
1.第一章
初识了rabbitmq的使用 
demo在com.example.rabbitmq5.chapter1包下

2.第二章
主要内容1：基本概念介绍
    生产者(Producer)、消费者(Consumer)、队列(Queue)、交换器(Exchange)、路由键(RoutingKey)、绑定(Binding)
    连接(Connection)和信道 (Channel) 

主要内容2：四种交换器的类型
    fanout direct topic headers
    fanout:
        它会把所有发送到该交换器的消息路由到所有与该交换器绑定的队列中。
    direct:
        direct 类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey 和 RoutingKey
           完全匹配的队列中。
    topic:
        topic 类型的交换器在匹配规则上进行了扩展，它与 direct 类型的交换器相似，
          支持 .*(部分匹配) #(剩余匹配)  
    headers:
        headers 类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中
            的headers属性进行匹配

3.第三章
    3.1：连接RabbitMQ
    第一种：给定的参数(Ip 地址、端口号、用户名、密码等)下连接 RabbitMQ
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername(USERNAME);
        factory.setPassword(PASSWORD);
        factory.setVirtualHost(virtualHost) ;
        factory.setHost(IP ADDRESS);
        factory . setPort(PORT) ;
        Connection conn = factory.newConnection()
    第二种：选择使用 URI 的方式 
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUri("amqp:lluserName :password@ipAddress:portNumber/virtualHost");
        Connection conn = factory.newConnection();
        Connection 接口被用来创建一个 Channel:
        Channel channel = conn.createChannel();
    注意：
        Connection可以用来创建多个Channel实例,但是多个Channel实例不能在线程间共享
        应用程序应该为每一个线程开辟一个 Channel 。某些情况下 Channel 的操作可以并发运行，但
        是在其他情况下会导致在网络上出现错误的通信帧交错，同时也会影响友送方确认( publisher
        confrrm)机制的运行(详细可以参考 4.8 节)，所以多线程问共享 Channel 实例是非线程安全的。
    3.2使用交换器和队列 
    
        
            
    
    
   
    
